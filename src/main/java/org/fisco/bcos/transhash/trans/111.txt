String contractAddress = "";
        try {
        AssembleTransactionProcessor manager =
        TransactionProcessorFactory.createAssembleTransactionProcessor(
        client, client.getCryptoSuite().createKeyPair(), abiFile, binFile);
        // deploy
        TransactionResponse response = manager.deployByContractLoader("Asset", Lists.newArrayList());
        if (!response.getTransactionReceipt().getStatus().equals("0x0")) {
        return;
        }
        contractAddress = response.getContractAddress();
        // call function with event
        List<Object> paramsSetValues = new ArrayList<Object>();
        paramsSetValues.add("Alice");
        paramsSetValues.add("Bob");
        paramsSetValues.add(new BigInteger("100"));
        TransactionResponse transactionResponse =
        manager.sendTransactionAndGetResponse(
        contractAddress, abi, "transfer", paramsSetValues);
        logger.info("transaction response : " + JsonUtils.toJson(transactionResponse));
        } catch (Exception e) {
        logger.error("exception:", e);
        }

        // subscribe event
        EventLogParams eventLogParams = new EventLogParams();
        eventLogParams.setFromBlock("latest");
        eventLogParams.setToBlock("latest");
        eventLogParams.setAddresses(new ArrayList<>());
        ArrayList<Object> topics = new ArrayList<>();
        ArrayList<Object> topicIdx0 = new ArrayList<>();
        CryptoSuite invalidCryptoSuite =
        new CryptoSuite(client.getCryptoSuite().getCryptoTypeConfig());
        TopicTools topicTools = new TopicTools(invalidCryptoSuite);
        topicIdx0.add(topicTools.stringToTopic("TransferEvent(int256,string,string,uint256)"));
        topicIdx0.add(topicTools.stringToTopic("TransferAccountEvent(string,string)"));
        eventLogParams.setTopics(topics);

class SubscribeCallback implements EventCallback {
    public transient Semaphore semaphore = new Semaphore(1, true);

    SubscribeCallback() {
        try {
            semaphore.acquire(1);
        } catch (InterruptedException e) {
            logger.error("error :", e);
            Thread.currentThread().interrupt();
        }
    }

    @Override
    public void onReceiveLog(int status, List<EventLog> logs) {
        Assert.assertEquals(status, 0);
        String str = "status in onReceiveLog : " + status;
        logger.debug(str);
        semaphore.release();

        // decode event
        if (logs != null) {
            for (EventLog log : logs) {
                logger.debug(
                        " blockNumber:"
                                + log.getBlockNumber()
                                + ",txIndex:"
                                + log.getTransactionIndex()
                                + " data:"
                                + log.getData());
                ABICodec abiCodec = new ABICodec(client.getCryptoSuite());
                try {
                    List<Object> list = abiCodec.decodeEvent(abi, "TransferEvent", log);
                    logger.debug("decode event log content, " + list);
                    // list = [0, 0x81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a, 0x28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6, 0x0000000000000000000000000000000000000000000000000000000000000064]
                    // 后三个事件参数均为indexed属性
                    Assert.assertEquals(4, list.size());
                } catch (ABICodecException e) {
                    logger.error("decode event log error, " + e.getMessage());
                }
                try {
                    List<Object> list = abiCodec.decodeEvent(abi, "TransferAccountEvent", log);
                    logger.debug("decode event log content, " + list);
                    // list = [Alice, Bob]
                    Assert.assertEquals(2, list.size());
                } catch (ABICodecException e) {
                    logger.error("decode event log error, " + e.getMessage());
                }
            }
        }
    }
}

    SubscribeCallback subscribeEventCallback1 = new SubscribeCallback();
    String registerId =
            eventSubscribe.subscribeEvent(eventLogParams, subscribeEventCallback1);
        try {
                subscribeEventCallback1.semaphore.acquire(1);
                subscribeEventCallback1.semaphore.release();
                logger.info("subscribe successful, registerId is " + registerId);
                } catch (InterruptedException e) {
                logger.error("system error:", e);
                Thread.currentThread().interrupt();
                }
